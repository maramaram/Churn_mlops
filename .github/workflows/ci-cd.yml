name: ML Pipeline Automation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permet de lancer le workflow manuellement

jobs:  
  preprocess_data:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v3

      - name: 🔧 Installer Python et dépendances
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: 📦 Installer les packages nécessaires
        run: pip install -r requirements.txt

      - name: 🚀 Démarrer MLflow
        run: |
          nohup mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlruns --host 127.0.0.1 --port 5000 &
          sleep 10  # Attendre que MLflow démarre

      - name: 🔄 Vérifier MLflow
        run: |
          curl -I http://127.0.0.1:5000/api/2.0/mlflow/experiments/list || (echo "❌ MLflow n'est pas disponible" && exit 1)

      - name: 🔄 Exécuter le prétraitement des données
        run: |
          export MLFLOW_TRACKING_URI=http://127.0.0.1:5000
          python main.py --prepare


  train_model:
    runs-on: ubuntu-latest
    needs: preprocess_data
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v3

      - name: 🔧 Installer Python et dépendances
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: 📦 Installer les packages nécessaires
        run: pip install -r requirements.txt

      - name: 🚀 Démarrer MLflow
        run: |
          nohup mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlruns --host 127.0.0.1 --port 5000 &
          sleep 10  # Attendre que MLflow démarre

      - name: 🔄 Vérifier MLflow
        run: |
          curl -I http://127.0.0.1:5000/api/2.0/mlflow/experiments/list || (echo "❌ MLflow n'est pas disponible" && exit 1)

      - name: 🎯 Entraîner le modèle
        run: |
          export MLFLOW_TRACKING_URI=http://127.0.0.1:5000
          python main.py --train

      - name: 💾 Sauvegarder le modèle
        uses: actions/upload-artifact@v4
        with:
          name: trained_model
          path: model.pkl

  test_model:
    runs-on: ubuntu-latest
    needs: train_model
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v3

      - name: 🔧 Installer Python et dépendances
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: 📦 Installer les packages nécessaires
        run: pip install -r requirements.txt

      - name: 🔽 Télécharger le modèle entraîné
        uses: actions/download-artifact@v4
        with:
          name: trained_model

      - name: 🧪 Tester le modèle
        run: python main.py --evaluate

  deploy_api:
    runs-on: ubuntu-latest
    needs: test_model
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v3

      - name: 🔧 Installer Python et dépendances
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: 📦 Installer les packages nécessaires
        run: pip install -r requirements.txt

      - name: 🔽 Télécharger le modèle entraîné
        uses: actions/download-artifact@v4
        with:
          name: trained_model

      - name: 🚀 Lancer l'API FastAPI
        run: uvicorn app:app --host 0.0.0.0 --port 8000 &

